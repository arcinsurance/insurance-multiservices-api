// scripts/seed-carrier-lines.js
/* eslint-disable no-console */
const path = require('path');
const fs = require('fs');
const xlsx = require('xlsx');
const mysql = require('mysql2/promise');
require('dotenv').config();

const VALID_LOBS = new Set(['ACA', 'Medicare', 'Life', 'Supplementary']);

function normalizeRow(r) {
  const lob = String(r.LOB ?? r.lob ?? '').trim();
  const carrier = String(r.Carrier ?? r.carrier ?? '').trim();
  const state = String(r.State ?? r.state ?? '').trim().toUpperCase();

  if (!lob || !carrier || !state) return null;
  if (!VALID_LOBS.has(lob)) return null;
  if (!/^[A-Z]{2}$/.test(state)) return null;

  return { lob, carrier, state, status: 'active' };
}

async function main() {
  try {
    const xlsxPathArg = process.argv[2] || './Carriers.xlsx';
    const xlsxPath = path.resolve(process.cwd(), xlsxPathArg);

    if (!fs.existsSync(xlsxPath)) {
      console.error(`❌ No se encontró el archivo: ${xlsxPath}`);
      process.exit(1);
    }

    const workbook = xlsx.readFile(xlsxPath);
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const rawRows = xlsx.utils.sheet_to_json(sheet, { defval: '' });

    // Normaliza + dedup
    const dedupKey = (r) => `${r.lob}|${r.carrier}|${r.state}`;
    const map = new Map();
    for (const rr of rawRows) {
      const row = normalizeRow(rr);
      if (row) map.set(dedupKey(row), row);
    }
    const rows = Array.from(map.values());
    if (rows.length === 0) {
      console.log('⚠️ No hay filas válidas para insertar.');
      process.exit(0);
    }

    // Conexión a DB
    const conn = await mysql.createPool({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      port: Number(process.env.DB_PORT || 3306),
      waitForConnections: true,
      connectionLimit: 5,
    });

    // Asegura tabla (idempotente)
    await conn.query(`
      CREATE TABLE IF NOT EXISTS carrier_lines (
        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
        lob VARCHAR(32) NOT NULL,
        carrier VARCHAR(128) NOT NULL,
        state CHAR(2) NOT NULL,
        status ENUM('active','inactive') NOT NULL DEFAULT 'active',
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY unique_lob_carrier_state (lob, carrier, state)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    `);

    // Inserción en bloque con "upsert"
    const values = rows.map(r => [r.lob, r.carrier, r.state, r.status]);

    const sql = `
      INSERT INTO carrier_lines (lob, carrier, state, status)
      VALUES ?
      ON DUPLICATE KEY UPDATE
        status = VALUES(status),
        updated_at = CURRENT_TIMESTAMP
    `;

    const [result] = await conn.query(sql, [values]);
    console.log(`✅ Seed completado. Filas procesadas: ${rows.length}`);
    console.log(`ℹ️ Resultado MySQL:`, result);

    await conn.end();
    process.exit(0);
  } catch (err) {
    console.error('❌ Error ejecutando seed:', err?.message || err);
    process.exit(1);
  }
}

main();
